import { Vulnerability } from "./types/Vulnerability";
/**
 * Manages a list of structured vulnerability entries.
 *
 * This class is responsible for storing and handling a collection of vulnerability records,
 * each represented by the `Vulnerability` type. It provides methods to insert, retrieve,
 * and manage these entries in a structured and predictable way.
 *
 * Typical use cases include keeping track of vulnerabilities detected in software components
 * and performing analysis or filtering on the stored data.
 *
 * @example
 * ```ts
 * const vulnerabilities = new Vulnerabilities();
 * vulnerabilities.addVulnerability({ id: "CVE-2024-1234", severity: "high", ... });
 * console.log(vulnerabilities.length); // Output: 1
 * ```
 */
export class Vulnerabilities {
  private vulnerabilityList: Array<Vulnerability>;

  constructor() {
    this.vulnerabilityList = [];
  }
/**
 * Adds a new vulnerability to the list if it does not already exist.
 *
 * This method checks whether the given `Vulnerability` entry has already been added
 * to the internal list to avoid duplicates. If it's not present, the entry is appended.
 * The check uses the `cveID` property to check if an item has been added.
 *
 * @param item - The vulnerability object to be added.
 *
 * @returns void
 *
 * @example
 * ```ts
 * const vulnerability: Vulnerability = { id: "CVE-2024-1234", severity: "medium", ... };
 * vulnerabilities.addVulnerability(vulnerability); // Adds only if not already added
 * ```
 */
  public addVulnerability(item: Vulnerability): void {
    if (!this.isAlreadyAdded(item.cveId)) {
      this.vulnerabilityList.push(item);
    }
  }
  /**
 * Retrieves the entire list of stored vulnerabilities.
 *
 * This getter provides read-only access to the internal list of vulnerabilities
 * managed by this instance. The list contains all entries previously added
 * via `addVulnerability`.
 *
 * @returns An array containing all registered vulnerabilities.
 *
 * @example
 * ```ts
 * const allVulns = vulnerabilities.all;
 * allVulns.forEach(v => console.log(v.cveId));
 * ```
 */
  public get all(): Array<Vulnerability> {
    return this.vulnerabilityList;
  }
/**
 * Returns the total number of stored vulnerabilities.
 *
 * This getter is useful for monitoring how many unique vulnerabilities
 * have been registered in the current instance.
 *
 * @returns The number of vulnerabilities currently in the list.
 *
 * @example
 * ```ts
 * console.log(`Found ${vulnerabilities.length} vulnerabilities.`);
 * ```
 */
  public get length(): number {
    return this.vulnerabilityList.length;
  }
/**
 * Checks whether a vulnerability is already present in the list.
 *
 * This method compares the provided CVE identifier with existing entries
 * and determines if the vulnerability has already been registered.
 *
 * @param cveId â€” The CVE identifier to search for (e.g., "CVE-2021-12345").
 * @returns `true` if the vulnerability is already in the list; otherwise, `false`.
 *
 * @example
 * ```ts
 * if (!vulnerabilities.isAlreadyAdded("CVE-2021-12345")) {
 *   vulnerabilities.addVulnerability(vuln);
 * }
 * ```
 */
  public isAlreadyAdded(cveId: string): boolean {
    const resp = this.vulnerabilityList.find(
      (item: Vulnerability) => item.cveId == cveId
    );
    return typeof resp != "undefined";
  }
/**
 * Generates a string representation of the vulnerability list.
 *
 * This method returns a textual summary of all stored vulnerabilities,
 * typically used for logging or debugging purposes.
 *
 * @returns A string that summarizes the internal state of the vulnerability list.
 *
 * @example
 * ```ts
 * console.log(vulnerabilities.toString());
 * ```
 */
  public toString() {
    let json = JSON.stringify(this.vulnerabilityList);
    json = json.concat("}");
    return '{ "vulnerabilities": '.concat(json);
  }
}
