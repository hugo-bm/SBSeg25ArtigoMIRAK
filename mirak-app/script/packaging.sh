#!/bin/bash

# name of package and version
PACKAGE_NAME="mirak-app"
VERSION="1.0.0"

# Input and output directory 
OUTPUT_DIR="dist"
BUILD_DIR="packaging"
PROJECT_FILES_DIR="build"

# List of required files/subfolders in the build. Checked only at the first level.
REQUIRED_ITEMS=("app.js" "app.js.map" "api" "cli" "config" "core" "database" "shared")

# Clean up previous directories
rm -rf "$OUTPUT_DIR" "$BUILD_DIR"
mkdir -p "$OUTPUT_DIR" "$BUILD_DIR"

# Directory structure for the package
DEBIAN_DIR="$BUILD_DIR/$PACKAGE_NAME/DEBIAN"
OPT_DIR="$BUILD_DIR/$PACKAGE_NAME/opt/$PACKAGE_NAME"
BIN_DIR="$BUILD_DIR/$PACKAGE_NAME/usr/local/bin"

mkdir -p "$DEBIAN_DIR" "$OPT_DIR" "$BIN_DIR"

# Function to check existence and organization after transpilation
check_build() {
  if [ ! -d "$PROJECT_FILES_DIR/" ]; then
    echo "Build directory does not exist."
    echo "Make sure you are in the root directory of the Mirak-app software."
    return 1
  fi

  # Check if the "build" directory is not empty
  if [ -z "$(ls -A "$PROJECT_FILES_DIR/")" ]; then
    echo "Build directory is empty."
    return 1
  fi

  # Checks required files/folders
  for item in "${REQUIRED_ITEMS[@]}"; do
    if [ ! -e "$PROJECT_FILES_DIR/$item" ]; then
      echo "Required item missing in build: $item"
      return 1
    fi
  done

  return 0
}

# Function to check for corrupted files (e.g. zero size)
check_integrity() {
  local corrupted=0
  for file in "$PROJECT_FILES_DIR"/*; do
    if [ -f "$file" ] && [ ! -s "$file" ]; then
      echo "Corrupted file (empty): $file"
      corrupted=1
    fi
  done

  return $corrupted
}

# Run the checks
if ! check_build; then
  echo "Build is invalid. Try to build project with 'npm run build'"
  exit 1
fi

if ! check_integrity; then
  echo "Build has corrupted files. Try to rebuild."
  exit 1
fi

# Copy the project files
if ! cp -r "$PROJECT_FILES_DIR"/* "$OPT_DIR"; then
  echo "Failed to copy build to $OPT_DIR"
  exit 1
fi

if ! cp -r package.json "$OPT_DIR"; then
  echo "No such file found"
  exit 1
fi

if ! cp -r mirak-app "$OPT_DIR"; then
  echo "No such file found"
  exit 1
fi
chmod +x mirak-app


# Create symbolic link to binary
ln -s "/opt/$PACKAGE_NAME/$PACKAGE_NAME" "$BIN_DIR/$PACKAGE_NAME"

# Control file for .deb
cat > "$DEBIAN_DIR/control" <<EOL
Package: $PACKAGE_NAME
Version: $VERSION
Section: utils
Priority: optional
Architecture: all
Maintainer: Hugo Batalha Moreno <hugomb123@hotmail.com>
Uploaders: Hugo Batalha Moreno <hugomb123@hotmail.com>, Yuri de Abreu de Melo <abreumelo@ime.eb.br>, Ronaldo Moreira Salles <salles@ime.eb.br> and Frederico Sauer Guimar√£es Oliveira <fredsauer@uezo.edu.br>.
Description: This software is part of the MIRAK project and aims to help information technology or cybersecurity management professionals identify potential inconsistencies that may impact RPKI solution operations and enable a contingency plan. Mirak-app is a processing and analysis tool that aims to simplify the way professionals evaluate computer systems with a focus on Relying Party RPKI, through an automated system that can evaluate a series of vulnerabilities and scenarios in a short space of time. This solution uses the MIRAK file, generated by the Mirak-extractor software, containing the aspects and characteristics of the execution environment.
Depends: nodejs, npm
EOL

# Post-installation script
cat > "$DEBIAN_DIR/postinst" <<EOL
#!/bin/bash

# Install dependencies
cd /opt/$PACKAGE_NAME
if ! npm install --omit=dev; then
  echo "Error installing dependencies. Aborting."
  exit 1
fi
chmod +x mirak-app
cd /usr/local/bin/
chmod +x mirak-app
EOL
chmod +x "$DEBIAN_DIR/postinst"

# Pre-removal script

cat > "$DEBIAN_DIR/prerm" <<EOL
#!/bin/bash

echo "Removing the $PACKAGE_NAME package..."

if [ -L "/usr/local/bin/$PACKAGE_NAME" ]; then
  echo "Removing symbolic link /usr/local/bin/$PACKAGE_NAME..."
  rm -f /usr/local/bin/$PACKAGE_NAME
fi


if [ -d "/opt/$PACKAGE_NAME" ]; then
  echo "Cleaning up dependencies in /opt/$PACKAGE_NAME/..."
  rm -rf /opt/$PACKAGE_NAME/node_modules
  rm -rf /opt/$PACKAGE_NAME/package-lock.json
fi

echo "Package removed successfully."
exit 0
EOL
chmod +x "$DEBIAN_DIR/prerm"

# Creating the .deb package
dpkg-deb --build "$BUILD_DIR/$PACKAGE_NAME" "$OUTPUT_DIR/$PACKAGE_NAME.deb"

# Creating the .rpm package (using fpm)
# if command -v fpm &> /dev/null; then
#   fpm -s dir -t rpm \
#       -n "$PACKAGE_NAME" \
#       -v "$VERSION" \
#       --after-install "$DEBIAN_DIR/postinst" \
#       --description "This component aims to assess the existence of vulnerabilities in the execution environment based on information contained in the MIRAK file" \
#       --depends "nodejs" \
#       --depends "npm" \
#       -C "$BUILD_DIR/$PACKAGE_NAME" . \
#       -p "$OUTPUT_DIR/$PACKAGE_NAME.rpm"
# else
#   echo "FPM not found. Install with 'gem install fpm' to generate .rpm packages."
#fi

# Closing message
echo "Package generated in: $OUTPUT_DIR"
