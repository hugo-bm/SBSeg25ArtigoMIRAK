FROM ubuntu:20.04

# Atualizando o sistema operacional
RUN apt update && apt upgrade -y

ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/usr/local/go/bin:/root/go/bin:$PATH"
# Instalando dependecias necessárias para o processo de instalação
RUN apt-get update && apt install -y --no-install-recommends \
    curl gpg ca-certificates nginx=1.18.0-0ubuntu1.7 build-essential make \
    libssl-dev \
    zlib1g-dev \
    libncurses5-dev \
    libnss3-dev \
    libsqlite3-dev \
    libreadline-dev \
    libffi-dev procps\
    libbz2-dev iproute2 \
    git unzip \
    gcc sqlite3 lsof \
    golang debian-goodies\
    wget

RUN cd /usr/src \
&& wget https://www.python.org/ftp/python/3.8.16/Python-3.8.16.tgz \
&& tar xzf Python-3.8.16.tgz \
&& cd Python-3.8.16 \
&& ./configure --enable-optimizations \
&& make altinstall

RUN  ln -sf /usr/local/bin/python3.8 /usr/bin/python3.8 && \
/usr/local/bin/python3.8 -m ensurepip --upgrade && \
/usr/local/bin/python3.8 -m pip install --upgrade pip

ARG RT_VERSION

# Configurando e instalando o routinator 
RUN curl -fsSL https://packages.nlnetlabs.nl/aptkey.asc | gpg --dearmor -o /usr/share/keyrings/nlnetlabs-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/nlnetlabs-archive-keyring.gpg] https://packages.nlnetlabs.nl/linux/ubuntu \
    $(grep -oP '^VERSION_CODENAME=\K.*' /etc/os-release)-proposed main" | tee /etc/apt/sources.list.d/nlnetlabs-proposed.list > /dev/null || echo "Falha ao obter a chave e adicionar o novo repositório"  && \
    apt update || echo "Falha ao aplicar atualização com o repositório do routinator aplicado" && \
    apt policy routinator || echo "As políticas para o Routinator não foram aplicadas" && \
    apt install -y routinator=${RT_VERSION}~rc1-1$(grep -oP '^VERSION_CODENAME=\K.*' /etc/os-release ) && echo "Instalação não ocorreu com sucesso"


# Criar um arquivo HTML dentro do contêiner usando echo
RUN echo '<!DOCTYPE html> \
    <html lang="en"> \
    <head> \
    <meta charset="UTF-8"> \
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> \
    <title>Página Demonstrativa</title> \
    <style> \
    body { font-family: Arial, sans-serif; text-align: center; margin: 50px; } \
    h1 { color: #333; } \
    </style> \
    </head> \
    <body> \
    <h1>Bem-vindo ao Nginx no Docker!</h1> \
    <p>Esta é uma página gerada diretamente no Dockerfile.</p> \
    </body> \
    </html>' > /var/www/html/index.html


# Adicionar Routinator e GO ao PATH
ENV GOROOT=/usr/local/go \
    GOPATH=/go \
    PATH=/root/.cargo/bin:/go/bin:/usr/local/go/bin:${PATH}

# Instala o Go 1.24

RUN wget https://go.dev/dl/go1.24.0.linux-amd64.tar.gz && \
    rm -rf /usr/local/go && \
    tar -C /usr/local -xzf go1.24.0.linux-amd64.tar.gz && \
    rm go1.24.0.linux-amd64.tar.gz


# Instala o Trivy (v0.61.0)
RUN wget https://github.com/aquasecurity/trivy/releases/download/v0.61.0/trivy_0.61.0_Linux-64bit.deb && \
    dpkg -i trivy_0.61.0_Linux-64bit.deb && \
    rm trivy_0.61.0_Linux-64bit.deb

# Criar usuário para o teste
RUN useradd -ms /bin/bash user_exemple

# Configurar diretório de trabalho
WORKDIR /workspaces/project

# Declarar diretório de saída
VOLUME /output /workspaces/project/output

# Expor as portas para o Routinator
EXPOSE 8323 3323 80

COPY ./experiments/start_extractor.sh /




# Configurar o container para iniciar com o shell
CMD ["/bin/bash", "-c", "source /start_extractor.sh"]
